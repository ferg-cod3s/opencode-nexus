---
import Layout from '../layouts/Layout.astro';
import { invoke } from '../utils/tauri-api';
---

<Layout title="OpenCode Nexus - Setup">
  <main class="onboarding-container">
    <div class="onboarding-content">
      <div class="onboarding-header">
        <h1>Welcome to OpenCode Nexus</h1>
        <p>Let's get you set up with your local OpenCode AI assistant</p>
      </div>

      <div class="onboarding-progress">
        <div class="progress-bar">
          <div class="progress-fill" id="progress-fill"></div>
        </div>
        <div class="progress-steps">
          <span class="step" data-step="1">System Check</span>
          <span class="step" data-step="2">Account Setup</span>
          <span class="step" data-step="3">Server Setup</span>
          <span class="step" data-step="4">Server Start</span>
          <span class="step" data-step="5">Configuration</span>
          <span class="step" data-step="6">Complete</span>
        </div>
      </div>

      <div class="onboarding-body" id="onboarding-body">
        <!-- Steps will be populated by JavaScript -->
      </div>

      <div class="onboarding-actions">
        <button id="prev-btn" class="btn btn-secondary" disabled>Previous</button>
        <button id="next-btn" class="btn btn-primary">Next</button>
        <button id="skip-btn" class="btn btn-link">Skip</button>
      </div>
    </div>
  </main>
</Layout>

<style>
  .onboarding-container {
    min-height: 100vh;
    background: hsl(220, 20%, 98%);
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
  }

  .onboarding-content {
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    padding: 2rem;
    width: 100%;
    max-width: 600px;
  }

  .onboarding-header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .onboarding-header h1 {
    color: hsl(220, 20%, 20%);
    margin-bottom: 0.5rem;
  }

  .onboarding-header p {
    color: hsl(220, 10%, 50%);
  }

  .onboarding-progress {
    margin-bottom: 2rem;
  }

  .progress-bar {
    height: 4px;
    background: hsl(220, 20%, 90%);
    border-radius: 2px;
    margin-bottom: 1rem;
    overflow: hidden;
  }

  .progress-fill {
    height: 100%;
    background: hsl(220, 90%, 50%);
    border-radius: 2px;
    transition: width 0.3s ease;
    width: 0%;
  }

  .progress-steps {
    display: flex;
    justify-content: space-between;
    gap: 0.5rem;
  }

  .step {
    font-size: 0.75rem;
    color: hsl(220, 10%, 60%);
    flex: 1;
    text-align: center;
    padding: 0 0.25rem;
  }

  .step.active {
    color: hsl(220, 90%, 50%);
    font-weight: 500;
  }

  .step.completed {
    color: hsl(120, 50%, 50%);
  }

  .onboarding-body {
    min-height: 300px;
    margin-bottom: 2rem;
  }

  .step-content {
    display: none;
  }

  .step-content.active {
    display: block;
  }

  .onboarding-actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 6px;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.2s;
  }

  .btn-primary {
    background: hsl(220, 90%, 50%);
    color: white;
  }

  .btn-primary:hover:not(:disabled) {
    background: hsl(220, 90%, 45%);
  }

  .btn-primary:disabled {
    background: hsl(220, 20%, 70%);
    cursor: not-allowed;
  }

  .btn-secondary {
    background: hsl(220, 20%, 95%);
    color: hsl(220, 20%, 50%);
    border: 1px solid hsl(220, 20%, 80%);
  }

  .btn-secondary:hover:not(:disabled) {
    background: hsl(220, 20%, 90%);
  }

  .btn-link {
    background: none;
    color: hsl(220, 90%, 50%);
    text-decoration: underline;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: hsl(220, 20%, 30%);
    font-weight: 500;
  }

  .form-group input,
  .form-group select {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid hsl(220, 20%, 80%);
    border-radius: 6px;
    font-size: 1rem;
  }

  .form-group input:focus,
  .form-group select:focus {
    outline: none;
    border-color: hsl(220, 90%, 50%);
    box-shadow: 0 0 0 2px hsl(220, 90%, 50%, 0.2);
  }

  .error-message {
    background: hsl(0, 70%, 95%);
    color: hsl(0, 70%, 50%);
    padding: 1rem;
    border-radius: 6px;
    border: 1px solid hsl(0, 70%, 85%);
    margin-bottom: 1rem;
  }

  .success-message {
    background: hsl(120, 50%, 95%);
    color: hsl(120, 50%, 50%);
    padding: 1rem;
    border-radius: 6px;
    border: 1px solid hsl(120, 50%, 85%);
    margin-bottom: 1rem;
  }

  .requirements-list {
    list-style: none;
    padding: 0;
    margin: 1rem 0;
  }

  .requirements-list li {
    padding: 0.5rem 0;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .requirements-list li::before {
    content: '○';
    color: hsl(220, 10%, 60%);
    font-weight: bold;
  }

  .requirements-list li.valid::before {
    content: '✓';
    color: hsl(120, 50%, 50%);
  }

  .requirements-list li.invalid::before {
    content: '✗';
    color: hsl(0, 70%, 50%);
  }

  @media (max-width: 768px) {
    .onboarding-container {
      padding: 1rem;
    }

    .onboarding-content {
      padding: 1.5rem;
    }

    .onboarding-actions {
      flex-direction: column;
      gap: 1rem;
    }

    .btn {
      width: 100%;
    }
  }
</style>

<script>
  // Import required modules
  import { invoke } from '../utils/tauri-api';

  // Onboarding state
  let currentStep = 1;
  const totalSteps = 6;

  // DOM elements
  const progressFill = document.getElementById('progress-fill') as HTMLElement;
  const onboardingBody = document.getElementById('onboarding-body') as HTMLElement;
  const prevBtn = document.getElementById('prev-btn') as HTMLButtonElement;
  const nextBtn = document.getElementById('next-btn') as HTMLButtonElement;
  const skipBtn = document.getElementById('skip-btn') as HTMLButtonElement;

  // Step templates
  const stepTemplates = {
    1: `
      <div class="step-content active">
        <h2>System Requirements Check</h2>
        <p>Let's verify your system can run OpenCode AI.</p>
        <div id="system-check-results">
          <div class="loading-spinner"></div>
          <p>Checking system requirements...</p>
        </div>
      </div>
    `,
    2: `
      <div class="step-content active">
        <h2>Create Owner Account</h2>
        <p>Set up your administrator account for OpenCode Nexus.</p>
        <form id="account-form">
          <div class="form-group">
            <label for="username">Username</label>
            <input type="text" id="username" name="username" required minlength="3" maxlength="50">
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
            <ul class="requirements-list" id="password-requirements">
              <li data-req="length">At least 8 characters</li>
              <li data-req="uppercase">One uppercase letter</li>
              <li data-req="lowercase">One lowercase letter</li>
              <li data-req="number">One number</li>
            </ul>
          </div>
          <div class="form-group">
            <label for="confirm-password">Confirm Password</label>
            <input type="password" id="confirm-password" name="confirmPassword" required>
          </div>
        </form>
      </div>
    `,
    3: `
      <div class="step-content active">
        <h2>Server Setup</h2>
        <p>Choose how you'd like to set up your OpenCode server.</p>
        <div class="setup-options">
          <label class="setup-option">
            <input type="radio" name="setup-type" value="local" checked>
            <div class="option-content">
              <h3>Local Installation</h3>
              <p>Install OpenCode server on this machine</p>
            </div>
          </label>
          <label class="setup-option">
            <input type="radio" name="setup-type" value="remote">
            <div class="option-content">
              <h3>Remote Server</h3>
              <p>Connect to an existing OpenCode server</p>
            </div>
          </label>
        </div>
        <div id="local-setup" class="setup-details">
          <div class="form-group">
            <label for="server-path">OpenCode Server Path</label>
            <input type="text" id="server-path" name="serverPath" placeholder="/path/to/opencode">
            <button type="button" id="browse-btn" class="btn btn-secondary">Browse</button>
          </div>
        </div>
        <div id="remote-setup" class="setup-details" style="display: none;">
          <div class="form-group">
            <label for="server-url">Server URL</label>
            <input type="url" id="server-url" name="serverUrl" placeholder="https://your-server.com">
          </div>
          <div class="form-group">
            <label for="api-key">API Key (optional)</label>
            <input type="password" id="api-key" name="apiKey">
          </div>
        </div>
      </div>
    `,
    4: `
      <div class="step-content active">
        <h2>Start Server</h2>
        <p>Starting your OpenCode server...</p>
        <div id="server-start-status">
          <div class="loading-spinner"></div>
          <p>Initializing OpenCode server...</p>
        </div>
      </div>
    `,
    5: `
      <div class="step-content active">
        <h2>Configuration</h2>
        <p>Configuring your OpenCode server...</p>
        <div id="config-status">
          <div class="loading-spinner"></div>
          <p>Applying configuration...</p>
        </div>
      </div>
    `,
    6: `
      <div class="step-content active">
        <h2>Setup Complete!</h2>
        <p>Your OpenCode Nexus is ready to use.</p>
        <div class="success-message">
          <p>✅ System requirements met</p>
          <p>✅ Owner account created</p>
          <p>✅ Server configured and running</p>
        </div>
      </div>
    `
  };

  // Initialize onboarding
  async function initializeOnboarding() {
    try {
      // Check if already completed
      const onboardingState = await invoke('get_onboarding_state');
      if (onboardingState.config.is_completed) {
        window.location.href = '/dashboard';
        return;
      }

      // Show first step
      showStep(1);

      // Set up event listeners
      setupEventListeners();

      // Start system check
      await performSystemCheck();

    } catch (error) {
      console.error('Failed to initialize onboarding:', error);
      showError('Failed to initialize onboarding. Please refresh the page.');
    }
  }

  function showStep(step: number) {
    currentStep = step;

    // Update progress bar
    const progress = ((step - 1) / (totalSteps - 1)) * 100;
    if (progressFill) {
      progressFill.style.width = `${progress}%`;
    }

    // Update step indicators
    const steps = document.querySelectorAll('.step');
    steps.forEach((stepEl, index) => {
      const stepNumber = index + 1;
      stepEl.classList.toggle('active', stepNumber === currentStep);
      stepEl.classList.toggle('completed', stepNumber < currentStep);
    });

    // Show step content
    if (onboardingBody) {
      onboardingBody.innerHTML = stepTemplates[step as keyof typeof stepTemplates] || '';
    }

    // Update button states
    if (prevBtn) {
      prevBtn.disabled = step === 1;
    }
    if (nextBtn) {
      nextBtn.textContent = step === totalSteps ? 'Complete' : 'Next';
    }
  }

  function setupEventListeners() {
    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        if (currentStep > 1) {
          showStep(currentStep - 1);
        }
      });
    }

    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        if (currentStep < totalSteps) {
          handleNextStep();
        } else {
          handleComplete();
        }
      });
    }

    if (skipBtn) {
      skipBtn.addEventListener('click', () => {
        window.location.href = '/dashboard';
      });
    }
  }

  async function performSystemCheck() {
    try {
      const requirements = await invoke('get_onboarding_state');

      const resultsDiv = document.getElementById('system-check-results');
      if (resultsDiv) {
        resultsDiv.innerHTML = `
          <ul class="requirements-list">
            <li class="${requirements.system_requirements.os_compatible ? 'valid' : 'invalid'}">
              Operating System: ${requirements.system_requirements.os_compatible ? 'Compatible' : 'Not Compatible'}
            </li>
            <li class="${requirements.system_requirements.memory_sufficient ? 'valid' : 'invalid'}">
              Memory: ${requirements.system_requirements.memory_sufficient ? 'Sufficient' : 'Insufficient'}
            </li>
            <li class="${requirements.system_requirements.disk_space_sufficient ? 'valid' : 'invalid'}">
              Disk Space: ${requirements.system_requirements.disk_space_sufficient ? 'Available' : 'Insufficient'}
            </li>
            <li class="${requirements.system_requirements.network_available ? 'valid' : 'invalid'}">
              Network: ${requirements.system_requirements.network_available ? 'Available' : 'Not Available'}
            </li>
          </ul>
        `;
      }

      // Auto-advance if all requirements are met
      const allMet = Object.values(requirements.system_requirements).every(Boolean);
      if (allMet) {
        setTimeout(() => {
          showStep(2);
        }, 1500);
      } else {
        showError('Some system requirements are not met. Please check your system and try again.');
      }
    } catch (error) {
      console.error('Failed to perform system check:', error);
      showError('Failed to check system requirements.');
    }
  }

  function validateAccountForm(): boolean {
    const username = (document.getElementById('username') as HTMLInputElement)?.value || '';
    const password = (document.getElementById('password') as HTMLInputElement)?.value || '';
    const confirm = (document.getElementById('confirm-password') as HTMLInputElement)?.value || '';

    const hasMinLength = password.length >= 8;
    const hasUppercase = /[A-Z]/.test(password);
    const hasLowercase = /[a-z]/.test(password);
    const hasNumber = /\d/.test(password);

    // Update password requirements UI
    const reqs = document.querySelectorAll('#password-requirements li');
    reqs.forEach((req, index) => {
      const conditions = [hasMinLength, hasUppercase, hasLowercase, hasNumber];
      req.classList.toggle('valid', conditions[index]);
      req.classList.toggle('invalid', !conditions[index]);
    });

    return !!username && !!password && password === confirm &&
           hasMinLength && hasUppercase && hasLowercase && hasNumber;
  }

  function validateSetupForm(): boolean {
    const setupType = (document.querySelector('input[name="setup-type"]:checked') as HTMLInputElement)?.value;

    if (setupType === 'local') {
      const serverPath = (document.getElementById('server-path') as HTMLInputElement)?.value;
      return !!serverPath;
    } else if (setupType === 'remote') {
      const serverUrl = (document.getElementById('server-url') as HTMLInputElement)?.value;
      return !!serverUrl;
    }

    return false;
  }

  async function handleNextStep() {
    switch (currentStep) {
      case 1:
        showStep(2);
        break;
      case 2:
        if (validateAccountForm()) {
          await createOwnerAccount();
        } else {
          showError('Please fill in all required fields correctly.');
        }
        break;
      case 3:
        if (validateSetupForm()) {
          showStep(4);
          await startServer();
        } else {
          showError('Please provide the required server information.');
        }
        break;
      case 4:
        showStep(5);
        await configureServer();
        break;
      case 5:
        showStep(6);
        break;
    }
  }

  async function createOwnerAccount() {
    try {
      const username = (document.getElementById('username') as HTMLInputElement)?.value;
      const password = (document.getElementById('password') as HTMLInputElement)?.value;

      if (!username || !password) {
        throw new Error('Username and password are required');
      }

      await invoke('create_owner_account', { username, password });
      showStep(3);
    } catch (error) {
      console.error('Failed to create owner account:', error);
      showError('Failed to create owner account. Please try again.');
    }
  }

  async function startServer() {
    try {
      const setupType = (document.querySelector('input[name="setup-type"]:checked') as HTMLInputElement)?.value;
      const serverPath = (document.getElementById('server-path') as HTMLInputElement)?.value;

      if (setupType === 'local' && serverPath) {
        await invoke('complete_onboarding', { opencode_server_path: serverPath });
      } else {
        await invoke('complete_onboarding', {});
      }

      // Wait a moment for server to start
      setTimeout(() => {
        showStep(5);
      }, 2000);
    } catch (error) {
      console.error('Failed to start server:', error);
      showError('Failed to start server. Please check your configuration.');
    }
  }

  async function configureServer() {
    try {
      // Configuration is handled by the backend
      await new Promise(resolve => setTimeout(resolve, 1000));
      showStep(6);
    } catch (error) {
      console.error('Failed to configure server:', error);
      showError('Failed to configure server.');
    }
  }

  async function handleComplete() {
    try {
      await invoke('complete_onboarding', {});
      window.location.href = '/dashboard';
    } catch (error: any) {
      const errorMessage = error?.message || String(error);
      console.error('Failed to complete onboarding', errorMessage);

      // Display specific validation errors
      showError(`Onboarding failed: ${errorMessage}`);

      // Provide guidance for fixing the issue
      if (errorMessage.includes('executable not found')) {
        showDownloadSuggestion();
      }
    }
  }

  function showError(message: string) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message';
    errorDiv.textContent = message;

    if (onboardingBody) {
      onboardingBody.insertBefore(errorDiv, onboardingBody.firstChild);
    }
  }

  function showDownloadSuggestion() {
    const suggestionDiv = document.createElement('div');
    suggestionDiv.className = 'success-message';
    suggestionDiv.innerHTML = `
      <p>It looks like OpenCode server is not installed on your system.</p>
      <p><a href="https://opencode.ai/download" target="_blank">Download OpenCode Server</a></p>
    `;

    if (onboardingBody) {
      onboardingBody.appendChild(suggestionDiv);
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeOnboarding);
  } else {
    initializeOnboarding();
  }
</script>
