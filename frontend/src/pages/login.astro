---
import Layout from '../layouts/Layout.astro';
---

<Layout title="OpenCode Nexus - Login">
  <main class="login-container">
    <div class="login-content">
      <header class="login-header">
        <h1 class="login-title">
          <span class="logo-icon" aria-hidden="true">üîê</span>
          Sign In to OpenCode Nexus
        </h1>
        <p class="login-subtitle">
          Enter your credentials to access your local OpenCode server
        </p>
      </header>

      <form class="login-form" id="login-form" data-testid="login-form" novalidate>
        <div class="form-group">
          <label for="username" class="form-label">
            Username
            <span class="required-indicator" aria-label="required">*</span>
          </label>
          <input 
            type="text" 
            id="username" 
            name="username"
            class="form-input"
            data-testid="username-input"
            required 
            autocomplete="username"
            aria-label="Username"
            aria-describedby="username-error username-help"
            aria-invalid="false"
          >
          <p id="username-help" class="help-text">
            Enter the username you created during setup
          </p>
          <div id="username-error" class="error-message" data-testid="username-required" role="alert" aria-live="polite">
            <!-- Error message will be populated by JavaScript -->
          </div>
        </div>

        <div class="form-group">
          <label for="password" class="form-label">
            Password
            <span class="required-indicator" aria-label="required">*</span>
          </label>
          <div class="password-input-container">
            <input 
              type="password" 
              id="password" 
              name="password"
              class="form-input"
              data-testid="password-input"
              required 
              autocomplete="current-password"
              aria-label="Password"
              aria-describedby="password-error password-help"
              aria-invalid="false"
            >
            <button 
              type="button" 
              class="password-toggle" 
              id="password-toggle"
              aria-label="Show password"
              tabindex="-1"
            >
              <span class="toggle-icon" aria-hidden="true">üëÅÔ∏è</span>
            </button>
          </div>
          <p id="password-help" class="help-text">
            Enter your secure password
          </p>
          <div id="password-error" class="error-message" data-testid="password-required" role="alert" aria-live="polite">
            <!-- Error message will be populated by JavaScript -->
          </div>
        </div>

        <div class="form-actions">
          <button 
            type="submit" 
            class="btn-primary btn-login"
            id="login-button"
            data-testid="login-button"
            aria-describedby="login-help"
          >
            <span class="button-text">Sign In</span>
            <span class="loading-spinner" aria-hidden="true"></span>
          </button>
          
          <p id="login-help" class="help-text">
            Click to authenticate and access your dashboard
          </p>
          
          <div id="login-error" class="error-message" data-testid="login-error" role="alert" aria-live="polite" style="display: none;">
            <!-- Login error message will be populated by JavaScript -->
          </div>
        </div>

        <div class="form-footer">
          <details class="help-section">
            <summary class="help-toggle">
              <span class="help-icon" aria-hidden="true">‚ùì</span>
              Need Help?
            </summary>
            <div class="help-content">
              <h3>Login Help</h3>
              <ul>
                <li><strong>Forgot your credentials?</strong> Contact your system administrator or check your setup documentation.</li>
                <li><strong>Account locked?</strong> Wait 30 minutes after multiple failed attempts, or contact support.</li>
                <li><strong>First time?</strong> Complete the <a href="/onboarding">setup wizard</a> first.</li>
                <li><strong>Technical issues?</strong> Check the <a href="/help">help documentation</a>.</li>
              </ul>
            </div>
          </details>
        </div>
      </form>

      <div class="system-status" role="region" aria-labelledby="system-status-title">
        <h2 id="system-status-title" class="sr-only">System Status</h2>
        <div class="status-item">
          <span class="status-icon" id="auth-status-icon" aria-hidden="true">‚è≥</span>
          <span class="status-text" id="auth-status-text">Checking authentication...</span>
        </div>
      </div>

      <!-- Global alert for system messages -->
      <div 
        id="global-alert" 
        class="global-alert" 
        role="alert" 
        aria-live="assertive" 
        aria-atomic="true"
        style="display: none;"
      >
        <div class="alert-content">
          <span class="alert-icon" aria-hidden="true"></span>
          <span class="alert-message"></span>
          <button class="alert-dismiss" aria-label="Dismiss alert">
            <span aria-hidden="true">‚úï</span>
          </button>
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  .login-container {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, hsl(220, 90%, 25%) 0%, hsl(220, 90%, 35%) 100%);
    padding: 1rem;
  }

  .login-content {
    background: white;
    border-radius: 1rem;
    box-shadow: 0 20px 25px -5px hsla(0, 0%, 0%, 0.1), 0 10px 10px -5px hsla(0, 0%, 0%, 0.04);
    max-width: 480px;
    width: 100%;
    padding: 2rem;
    position: relative;
  }

  .login-header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .login-title {
    font-size: 1.75rem;
    color: hsl(220, 90%, 25%);
    margin-bottom: 0.5rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
  }

  .logo-icon {
    font-size: 2rem;
  }

  .login-subtitle {
    color: hsl(220, 20%, 60%);
    font-size: 1rem;
    margin: 0;
    line-height: 1.5;
  }

  .login-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
  }

  .form-label {
    font-weight: 500;
    color: hsl(220, 90%, 25%);
    margin-bottom: 0.5rem;
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  .required-indicator {
    color: hsl(0, 70%, 50%);
    font-weight: bold;
  }

  .form-input {
    padding: 0.875rem 1rem;
    border: 2px solid hsl(0, 0%, 90%);
    border-radius: 0.5rem;
    font-size: 1rem;
    transition: all 0.3s ease;
    background: white;
    color: hsl(220, 15%, 20%);
  }

  .form-input:focus {
    outline: none;
    border-color: hsl(220, 90%, 60%);
    box-shadow: 0 0 0 3px hsla(220, 90%, 60%, 0.1);
  }

  .form-input:invalid {
    border-color: hsl(0, 70%, 50%);
  }

  .form-input:invalid:focus {
    border-color: hsl(0, 70%, 50%);
    box-shadow: 0 0 0 3px hsla(0, 70%, 50%, 0.1);
  }

  .password-input-container {
    position: relative;
    display: flex;
    align-items: center;
  }

  .password-toggle {
    position: absolute;
    right: 0.75rem;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 0.25rem;
    color: hsl(220, 20%, 60%);
    transition: color 0.3s ease;
  }

  .password-toggle:hover {
    color: hsl(220, 90%, 60%);
  }

  .password-toggle:focus {
    outline: 2px solid hsl(220, 90%, 60%);
    outline-offset: 2px;
  }

  .toggle-icon {
    font-size: 1.25rem;
    display: block;
  }

  .help-text {
    font-size: 0.875rem;
    color: hsl(220, 20%, 60%);
    margin-top: 0.5rem;
    margin-bottom: 0;
    line-height: 1.4;
  }

  .error-message {
    font-size: 0.875rem;
    color: hsl(0, 70%, 50%);
    margin-top: 0.5rem;
    min-height: 1.2em;
    font-weight: 500;
  }

  .error-message:empty {
    display: none;
  }

  .form-actions {
    margin-top: 1rem;
  }

  .btn-login {
    width: 100%;
    padding: 1rem 1.5rem;
    border: none;
    border-radius: 0.5rem;
    background: hsl(220, 90%, 60%);
    color: white;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  .btn-login:hover:not(:disabled) {
    background: hsl(220, 90%, 50%);
    transform: translateY(-1px);
    box-shadow: 0 10px 15px -3px hsla(0, 0%, 0%, 0.1);
  }

  .btn-login:focus {
    outline: none;
    box-shadow: 0 0 0 3px hsla(220, 90%, 60%, 0.3);
  }

  .btn-login:disabled {
    background: hsl(0, 0%, 80%);
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }

  .btn-login.loading .button-text {
    opacity: 0.7;
  }

  .loading-spinner {
    width: 1rem;
    height: 1rem;
    border: 2px solid transparent;
    border-top: 2px solid currentColor;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    display: none;
  }

  .btn-login.loading .loading-spinner {
    display: block;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .form-footer {
    margin-top: 2rem;
    padding-top: 1.5rem;
    border-top: 1px solid hsl(0, 0%, 95%);
  }

  .help-section {
    background: hsl(0, 0%, 98%);
    border-radius: 0.5rem;
    overflow: hidden;
  }

  .help-toggle {
    padding: 1rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    color: hsl(220, 90%, 25%);
    font-weight: 500;
    transition: background-color 0.3s ease;
    list-style: none;
  }

  .help-toggle:hover {
    background: hsl(0, 0%, 95%);
  }

  .help-toggle:focus {
    outline: 2px solid hsl(220, 90%, 60%);
    outline-offset: -2px;
  }

  .help-toggle::marker {
    display: none;
  }

  .help-icon {
    font-size: 1.25rem;
  }

  .help-content {
    padding: 0 1rem 1rem 1rem;
    color: hsl(220, 20%, 40%);
  }

  .help-content h3 {
    color: hsl(220, 90%, 25%);
    margin-bottom: 1rem;
    font-size: 1rem;
  }

  .help-content ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .help-content li {
    padding: 0.5rem 0;
    border-bottom: 1px solid hsl(0, 0%, 90%);
    line-height: 1.5;
  }

  .help-content li:last-child {
    border-bottom: none;
  }

  .help-content a {
    color: hsl(220, 90%, 60%);
    text-decoration: none;
    font-weight: 500;
  }

  .help-content a:hover {
    text-decoration: underline;
  }

  .help-content a:focus {
    outline: 2px solid hsl(220, 90%, 60%);
    outline-offset: 2px;
    border-radius: 2px;
  }

  .system-status {
    margin-top: 2rem;
    padding: 1rem;
    background: hsl(0, 0%, 98%);
    border-radius: 0.5rem;
    border: 1px solid hsl(0, 0%, 90%);
  }

  .status-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: 0.875rem;
    color: hsl(220, 20%, 60%);
  }

  .status-icon {
    font-size: 1rem;
  }

  .global-alert {
    position: fixed;
    top: 1rem;
    right: 1rem;
    max-width: 400px;
    z-index: 1000;
    animation: slideIn 0.3s ease;
  }

  .alert-content {
    background: white;
    border-radius: 0.5rem;
    padding: 1rem;
    box-shadow: 0 10px 15px -3px hsla(0, 0%, 0%, 0.1);
    border-left: 4px solid hsl(220, 90%, 60%);
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
  }

  .global-alert.error .alert-content {
    border-left-color: hsl(0, 70%, 50%);
  }

  .global-alert.success .alert-content {
    border-left-color: hsl(120, 50%, 50%);
  }

  .global-alert.warning .alert-content {
    border-left-color: hsl(45, 100%, 50%);
  }

  .alert-icon {
    font-size: 1.25rem;
    flex-shrink: 0;
  }

  .alert-message {
    flex: 1;
    color: hsl(220, 15%, 20%);
    line-height: 1.4;
  }

  .alert-dismiss {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.25rem;
    color: hsl(220, 20%, 60%);
    border-radius: 0.25rem;
    flex-shrink: 0;
  }

  .alert-dismiss:hover {
    background: hsl(0, 0%, 95%);
  }

  .alert-dismiss:focus {
    outline: 2px solid hsl(220, 90%, 60%);
    outline-offset: 2px;
  }

  @keyframes slideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  /* Responsive design */
  @media (max-width: 568px) {
    .login-content {
      padding: 1.5rem;
      border-radius: 0;
      margin: 0;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      justify-content: center;
    }

    .login-title {
      font-size: 1.5rem;
    }

    .global-alert {
      top: 0.5rem;
      right: 0.5rem;
      left: 0.5rem;
      max-width: none;
    }
  }

  /* Accessibility improvements */
  @media (prefers-reduced-motion: reduce) {
    .btn-login,
    .loading-spinner,
    .global-alert {
      animation: none;
      transition: none;
    }
    
    .btn-login:hover {
      transform: none;
    }
  }

  @media (prefers-contrast: high) {
    .login-content {
      border: 2px solid hsl(0, 0%, 0%);
    }
    
    .form-input:focus {
      border-color: hsl(0, 0%, 0%);
      box-shadow: 0 0 0 3px hsl(0, 0%, 0%);
    }
    
    .btn-login {
      background: hsl(0, 0%, 0%);
      border: 2px solid hsl(0, 0%, 0%);
    }
  }

  /* Print styles */
  @media print {
    .login-container {
      background: white;
    }
    
    .login-content {
      box-shadow: none;
      border: 1px solid hsl(0, 0%, 0%);
    }
    
    .global-alert {
      display: none !important;
    }
  }
</style>

<script>
  import { invoke, checkEnvironment } from '../utils/tauri-api.ts';

  class LoginManager {
    private form: HTMLFormElement;
    private usernameField: HTMLInputElement;
    private passwordField: HTMLInputElement;
    private loginButton: HTMLButtonElement;
    private passwordToggle: HTMLButtonElement;
    private isPasswordVisible: boolean = false;

    constructor() {
      this.form = document.getElementById('login-form') as HTMLFormElement;
      this.usernameField = document.getElementById('username') as HTMLInputElement;
      this.passwordField = document.getElementById('password') as HTMLInputElement;
      this.loginButton = document.getElementById('login-button') as HTMLButtonElement;
      this.passwordToggle = document.getElementById('password-toggle') as HTMLButtonElement;

      this.init();
    }

    private init() {
      this.bindEvents();
      this.checkAuthConfiguration();
      this.focusFirstField();
    }

    private bindEvents() {
      this.form.addEventListener('submit', this.handleSubmit.bind(this));
      this.passwordToggle.addEventListener('click', this.togglePasswordVisibility.bind(this));
      
      // Real-time validation
      this.usernameField.addEventListener('input', () => this.validateField('username'));
      this.passwordField.addEventListener('input', () => this.validateField('password'));
      
      // Clear errors on focus
      this.usernameField.addEventListener('focus', () => this.clearFieldError('username'));
      this.passwordField.addEventListener('focus', () => this.clearFieldError('password'));

      // Global alert dismiss
      document.addEventListener('click', (e) => {
        if (e.target && (e.target as HTMLElement).closest('.alert-dismiss')) {
          this.dismissAlert();
        }
      });
    }

    private async checkAuthConfiguration() {
      try {
        console.log('üîç Login page: Checking environment...');
        const env = checkEnvironment();
        console.log('üîç Login page: Environment check:', env);

        if (!env.canAuthenticate) {
          console.log('üîç Login page: Unsupported environment detected');
          this.updateSystemStatus('‚ö†Ô∏è', 'Running in unsupported environment', 'error');
          return;
        }

        console.log('üîç Login page: Checking auth configuration...');
        const isConfigured = await invoke('is_auth_configured');
        console.log('üîç Login page: Auth configured:', isConfigured);

        if (!isConfigured) {
          console.log('üîç Login page: Auth not configured, redirecting to /onboarding');
          this.showAlert(
            'Authentication not configured. Please complete the setup wizard first.',
            'warning',
            '‚ö†Ô∏è'
          );

          // Redirect to onboarding after a delay
          setTimeout(() => {
            window.location.href = '/onboarding';
          }, 3000);
          return;
        }

        console.log('üîç Login page: Auth configured successfully');
        this.updateSystemStatus('‚úì', 'Authentication configured', 'success');
      } catch (error) {
        console.error('‚ùå Login page: Failed to check auth configuration:', error);
        this.updateSystemStatus('‚ö†Ô∏è', 'Unable to check authentication status', 'error');
      }
    }

    private async handleSubmit(event: Event) {
      event.preventDefault();
      
      const username = this.usernameField.value.trim();
      const password = this.passwordField.value;

      // Validate form
      if (!this.validateForm()) {
        return;
      }

      this.setLoading(true);

      try {
        const isAuthenticated = await invoke('authenticate_user', {
          username,
          password
        });

        if (isAuthenticated) {
          console.log('üîç Login page: Authentication successful for user:', username);
          this.showAlert('Login successful! Redirecting to dashboard...', 'success', '‚úÖ');

          // Store authentication state (you might want to use a more secure method in production)
          sessionStorage.setItem('authenticated', 'true');
          sessionStorage.setItem('username', username);

          // Redirect to dashboard
          setTimeout(() => {
            console.log('üîç Login page: Redirecting to /dashboard');
            window.location.href = '/dashboard';
          }, 1500);
        } else {
          console.log('üîç Login page: Authentication failed - invalid credentials');
          this.showAlert(
            'Invalid credentials. Please check your username and password.',
            'error',
            '‚ùå'
          );
          this.setFieldError('password', 'Invalid credentials');
          this.passwordField.focus();
        }
      } catch (error) {
        console.error('Authentication error:', error);
        this.showAlert(
          'Authentication failed. Please try again or contact support.',
          'error',
          '‚ùå'
        );
      } finally {
        this.setLoading(false);
      }
    }

    private validateForm(): boolean {
      let isValid = true;

      if (!this.validateField('username')) {
        isValid = false;
      }

      if (!this.validateField('password')) {
        isValid = false;
      }

      return isValid;
    }

    private validateField(fieldName: 'username' | 'password'): boolean {
      const field = fieldName === 'username' ? this.usernameField : this.passwordField;
      const value = field.value.trim();

      this.clearFieldError(fieldName);

      if (!value) {
        this.setFieldError(fieldName, `${fieldName === 'username' ? 'Username' : 'Password'} is required`);
        return false;
      }

      if (fieldName === 'username' && value.length < 3) {
        this.setFieldError('username', 'Username must be at least 3 characters long');
        return false;
      }

      if (fieldName === 'password' && value.length < 8) {
        this.setFieldError('password', 'Password must be at least 8 characters long');
        return false;
      }

      return true;
    }

    private setFieldError(fieldName: 'username' | 'password', message: string) {
      const field = fieldName === 'username' ? this.usernameField : this.passwordField;
      const errorElement = document.getElementById(`${fieldName}-error`);
      
      field.setAttribute('aria-invalid', 'true');
      field.classList.add('error');
      
      if (errorElement) {
        errorElement.textContent = message;
      }
    }

    private clearFieldError(fieldName: 'username' | 'password') {
      const field = fieldName === 'username' ? this.usernameField : this.passwordField;
      const errorElement = document.getElementById(`${fieldName}-error`);
      
      field.setAttribute('aria-invalid', 'false');
      field.classList.remove('error');
      
      if (errorElement) {
        errorElement.textContent = '';
      }
    }

    private togglePasswordVisibility() {
      this.isPasswordVisible = !this.isPasswordVisible;
      
      this.passwordField.type = this.isPasswordVisible ? 'text' : 'password';
      this.passwordToggle.setAttribute('aria-label', this.isPasswordVisible ? 'Hide password' : 'Show password');
      
      const toggleIcon = this.passwordToggle.querySelector('.toggle-icon');
      if (toggleIcon) {
        toggleIcon.textContent = this.isPasswordVisible ? 'üôà' : 'üëÅÔ∏è';
      }
    }

    private setLoading(loading: boolean) {
      this.loginButton.disabled = loading;
      this.loginButton.classList.toggle('loading', loading);
      
      if (loading) {
        this.loginButton.setAttribute('aria-busy', 'true');
      } else {
        this.loginButton.removeAttribute('aria-busy');
      }
    }

    private showAlert(message: string, type: 'success' | 'error' | 'warning' | 'info' = 'info', icon: string = '‚ÑπÔ∏è') {
      const alertElement = document.getElementById('global-alert');
      const messageElement = alertElement?.querySelector('.alert-message');
      const iconElement = alertElement?.querySelector('.alert-icon');
      
      if (!alertElement || !messageElement || !iconElement) return;

      messageElement.textContent = message;
      iconElement.textContent = icon;
      
      alertElement.className = `global-alert ${type}`;
      alertElement.style.display = 'block';

      // Auto-dismiss after 5 seconds for success messages
      if (type === 'success') {
        setTimeout(() => this.dismissAlert(), 5000);
      }
    }

    private dismissAlert() {
      const alertElement = document.getElementById('global-alert');
      if (alertElement) {
        alertElement.style.display = 'none';
      }
    }

    private updateSystemStatus(icon: string, message: string, type: 'success' | 'error' | 'info' = 'info') {
      const iconElement = document.getElementById('auth-status-icon');
      const textElement = document.getElementById('auth-status-text');
      
      if (iconElement) iconElement.textContent = icon;
      if (textElement) {
        textElement.textContent = message;
        textElement.className = `status-text ${type}`;
      }
    }

    private focusFirstField() {
      // Focus the first empty field
      if (!this.usernameField.value) {
        this.usernameField.focus();
      } else if (!this.passwordField.value) {
        this.passwordField.focus();
      }
    }
  }

  // Initialize login manager when page loads
  document.addEventListener('DOMContentLoaded', () => {
    new LoginManager();
  });
</script>
</Layout>