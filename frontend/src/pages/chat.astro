---
import Layout from '../layouts/Layout.astro';
---

<Layout title="OpenCode Nexus - Chat">
  <main class="chat-container">
    <!-- Main Navigation Header -->
    <header class="dashboard-header">
      <div class="header-content">
        <h1>OpenCode Nexus</h1>
        <div class="user-menu" data-testid="user-menu">
          <span id="username-display">Loading...</span>
          <button id="logout-button" data-testid="logout-button" class="logout-btn">Sign Out</button>
        </div>
        <nav class="dashboard-nav">
          <a href="/dashboard" class="nav-link" data-testid="dashboard-tab">Dashboard</a>
          <a href="/chat" class="nav-link active" data-testid="chat-tab">Chat</a>
          <a href="/settings" class="nav-link">Settings</a>
          <a href="/logs" class="nav-link">Logs</a>
          <a href="/help" class="nav-link">Help</a>
        </nav>
      </div>
    </header>

    <!-- Chat interface will be mounted here by JavaScript -->
    <div id="chat-root" class="chat-root">
      <div class="loading-state" id="loading-state">
        <div class="loading-spinner"></div>
        <p>Starting chat session...</p>
      </div>
    </div>
  </main>
</Layout>

<script>
  import ChatInterface from '../components/ChatInterface.svelte';
  import { chatStore } from '../stores/chat';
  import { invoke } from '@tauri-apps/api/core';

  // Initialize chat system
  async function initializeChat() {
    try {
      console.log('üîç Chat: Initializing chat system...');

      // Display username from sessionStorage
      const username = sessionStorage.getItem('username') || 'User';
      const usernameDisplay = document.getElementById('username-display');
      if (usernameDisplay) {
        usernameDisplay.textContent = username;
      }

      // Set up logout functionality
      const logoutButton = document.getElementById('logout-button');
      if (logoutButton) {
        logoutButton.addEventListener('click', async () => {
          try {
            await invoke('logout_user');
            sessionStorage.clear();
            window.location.href = '/login';
          } catch (error) {
            console.error('Logout failed:', error);
            // Force logout on client side
            sessionStorage.clear();
            window.location.href = '/login';
          }
        });
      }

      // Initialize chat stores
      await chatStore.actions.initialize();

      // Load existing sessions
      await chatStore.actions.loadSessions(async () => {
        try {
          const sessions = await invoke('get_chat_sessions');
          return sessions;
        } catch (error) {
          console.warn('Failed to load chat sessions:', error);
          return [];
        }
      });

      // Mount ChatInterface component
      const chatRoot = document.getElementById('chat-root');
      if (chatRoot) {
        // Remove loading state
        const loadingState = document.getElementById('loading-state');
        if (loadingState) {
          loadingState.remove();
        }

        // Create and mount the chat interface
        const chatInterface = new ChatInterface({
          target: chatRoot,
          props: {
            onSendMessage: async (content: string) => {
              await chatStore.actions.sendMessage(content, async (sessionId: string, messageContent: string) => {
                await invoke('send_chat_message', { sessionId, content: messageContent });
              });
            },
            onClose: () => {
              // Handle session close if needed
              console.log('Chat session closed');
            }
          }
        });

        console.log('üîç Chat: ChatInterface component mounted successfully');
      } else {
        console.error('üîç Chat: Could not find #chat-root element');
      }

    } catch (error) {
      console.error('üîç Chat: Failed to initialize chat system:', error);

      // Show error state
      const chatRoot = document.getElementById('chat-root');
      if (chatRoot) {
        chatRoot.innerHTML = `
          <div class="error-state">
            <h2>Chat Unavailable</h2>
            <p>Failed to initialize chat system. Please check your OpenCode server connection.</p>
            <button onclick="window.location.reload()">Retry</button>
          </div>
        `;
      }
    }
  }

  // Initialize when page loads
  document.addEventListener('DOMContentLoaded', () => {
    initializeChat();
  });

  // Also try immediate initialization
  if (document.readyState !== 'loading') {
    initializeChat();
  }
</script>

<style>
  .chat-container {
    height: 100vh;
    background: hsl(220, 20%, 98%);
    display: flex;
    overflow: hidden;
  }

  .chat-root {
    flex: 1;
    display: flex;
    flex-direction: column;
    position: relative;
  }

  .loading-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    gap: 1rem;
    color: hsl(220, 10%, 60%);
  }

  .loading-spinner {
    width: 2rem;
    height: 2rem;
    border: 2px solid hsl(220, 10%, 20%, 0.1);
    border-top: 2px solid hsl(220, 90%, 60%);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .loading-state p {
    font-size: 1.125rem;
    font-weight: 500;
  }

  /* Hide loading state when chat is active */
  .chat-root.loaded .loading-state {
    display: none;
  }

  /* Mobile responsiveness */
  @media (max-width: 768px) {
    .chat-container {
      height: 100vh;
      height: 100dvh; /* Use dynamic viewport height on mobile */
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .loading-spinner {
      animation: none;
    }
  }
</style>

<script>
  console.log('üîç Chat page: Inline script executed');
</script>
<script src="../chat.ts"></script>

<style is:global>
  .app-layout {
    display: flex;
    height: 100vh;
    gap: 0;
  }

  .sessions-sidebar {
    width: 300px;
    flex-shrink: 0;
    border-right: 1px solid hsl(220, 10%, 20%, 0.1);
    background: white;
    overflow-y: auto;
  }

  .chat-main {
    flex: 1;
    min-width: 0;
    display: flex;
    flex-direction: column;
  }

  .error-banner {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.875rem 1.5rem;
    background: hsl(0, 70%, 50%, 0.1);
    border-bottom: 1px solid hsl(0, 70%, 50%, 0.2);
    color: hsl(0, 70%, 40%);
    position: relative;
    z-index: 10;
  }

  .error-icon {
    font-size: 1.125rem;
  }

  .error-message {
    flex: 1;
    font-weight: 500;
  }

  .error-dismiss {
    background: none;
    border: none;
    color: hsl(0, 70%, 40%);
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 0.25rem;
    font-size: 1rem;
    line-height: 1;
  }

  .error-dismiss:hover {
    background: hsl(0, 70%, 50%, 0.1);
  }

  /* Mobile responsiveness */
  @media (max-width: 768px) {
    .app-layout {
      flex-direction: column;
    }

    .sessions-sidebar {
      width: 100%;
      max-height: 200px;
      border-right: none;
      border-bottom: 1px solid hsl(220, 10%, 20%, 0.1);
    }

    .error-banner {
      padding: 0.75rem 1rem;
      font-size: 0.875rem;
    }
  }

  .error-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    padding: 2rem;
    text-align: center;
    color: hsl(220, 15%, 20%);
  }

  .error-state h2 {
    color: hsl(0, 70%, 50%);
    margin-bottom: 1rem;
    font-size: 1.5rem;
  }

  .error-state p {
    margin-bottom: 2rem;
    color: hsl(220, 20%, 60%);
    max-width: 400px;
  }

  .error-state button {
    padding: 0.75rem 1.5rem;
    background: hsl(220, 90%, 60%);
    color: white;
    border: none;
    border-radius: 0.5rem;
    cursor: pointer;
    font-weight: 500;
    transition: background-color 0.3s ease;
  }

  .error-state button:hover {
    background: hsl(220, 90%, 50%);
  }

  /* High Contrast Mode */
  @media (prefers-contrast: high) {
    .sessions-sidebar {
      border-right: 2px solid hsl(220, 30%, 18%);
    }

    .error-banner {
      border-bottom: 2px solid hsl(0, 70%, 50%);
    }
  }
</style>
