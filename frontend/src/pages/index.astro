---
import Layout from '../layouts/Layout.astro';
import SessionGrid from '../components/SessionGrid.svelte';
import ChatInterface from '../components/ChatInterface.svelte';
---

<Layout title="OpenCode Nexus">
  <main class="main-container">
    <div class="app-layout">
        <!-- Session Grid Sidebar -->
        <aside class="sessions-sidebar" id="sessions-sidebar">
          <!-- SessionGrid component will be mounted here by JavaScript -->
        </aside>

        <!-- Chat Interface -->
        <section class="chat-section" id="chat-section" data-testid="chat-messages">
          <!-- ChatInterface or welcome screen will be mounted here by JavaScript -->
          <div class="welcome-screen" id="welcome-screen">
            <div class="welcome-content">
              <h1 class="welcome-title">Welcome to OpenCode Nexus</h1>
              <p class="welcome-description">
                Start a conversation with your local OpenCode AI assistant.
                Create a new session to begin chatting.
              </p>
                <button
                  class="start-btn"
                  id="start-chat-btn"
                  data-testid="new-session-button"
                  disabled
                >
                  Start Your First Chat
                </button>
            </div>
          </div>
        </section>
    </div>
  </main>
</Layout>

<style>
  .main-container {
    height: 100vh;
    background: hsl(220, 20%, 98%);
  }

  .app-layout {
    display: flex;
    height: 100%;
    gap: 1rem;
    padding: 1rem;
  }

  .sessions-sidebar {
    width: 300px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }

  .chat-section {
    flex: 1;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    position: relative;
    overflow: hidden;
  }

  .welcome-screen {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
    text-align: center;
    padding: 2rem;
  }

  .welcome-content {
    max-width: 400px;
  }

  .welcome-title {
    font-size: 2rem;
    font-weight: 600;
    color: hsl(220, 20%, 20%);
    margin-bottom: 1rem;
  }

  .welcome-description {
    font-size: 1.1rem;
    color: hsl(220, 10%, 50%);
    margin-bottom: 2rem;
    line-height: 1.5;
  }

  .start-btn {
    background: hsl(220, 90%, 50%);
    color: white;
    border: none;
    padding: 0.75rem 2rem;
    border-radius: 6px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .start-btn:hover:not(:disabled) {
    background: hsl(220, 90%, 45%);
  }

  .start-btn:disabled {
    background: hsl(220, 20%, 70%);
    cursor: not-allowed;
  }

  @media (max-width: 768px) {
    .app-layout {
      flex-direction: column;
      gap: 0.5rem;
      padding: 0.5rem;
    }

    .sessions-sidebar {
      width: 100%;
      height: 200px;
    }

    .chat-section {
      height: calc(100vh - 280px);
    }
  }
</style>

<script>
  // Import required modules
  import SessionGrid from '../components/SessionGrid.svelte';
  import ChatInterface from '../components/ChatInterface.svelte';
  import { invoke } from '../utils/tauri-api';
  import type { ChatSession } from '../types/chat';

  // Component instances
  let sessionGridComponent: any = null;
  let chatInterfaceComponent: any = null;

  // Session state
  let activeSessionId: string | null = null;
  let currentSession: ChatSession | null = null;
  let loading = false;

  // DOM elements
  const startChatBtn = document.getElementById('start-chat-btn') as HTMLButtonElement;
  const sessionsSidebar = document.getElementById('sessions-sidebar') as HTMLElement;
  const chatSection = document.getElementById('chat-section') as HTMLElement;
  const welcomeScreen = document.getElementById('welcome-screen') as HTMLElement;

  // Initialize the application
  async function initializeApp() {
    try {
      // Get onboarding state first
      const onboardingState = await invoke('get_onboarding_state');

      // If onboarding config doesn't exist or isn't completed, redirect to onboarding
      if (!onboardingState.config || !onboardingState.config.is_completed) {
        window.location.href = '/onboarding';
        return;
      }

      // Check authentication status
      const isAuthenticated = await invoke('is_authenticated');
      if (!isAuthenticated) {
        window.location.href = '/login';
        return;
      }

      // Get user info
      const userInfo = await invoke('get_user_info');
      if (userInfo && userInfo[0]) {
        console.log(`Welcome back, ${userInfo[0]}!`);
      }

      // Enable start button since onboarding is complete
      startChatBtn.disabled = false;
      startChatBtn.textContent = 'Start New Chat';

      // Mount SessionGrid component
      mountSessionGrid();

      // Set up event listeners
      setupEventListeners();

      console.log('OpenCode Nexus initialized successfully');
    } catch (error) {
      console.error('Failed to initialize app:', error);
      // Show error message to user
      if (chatSection) {
        chatSection.innerHTML = `
          <div style="display: flex; align-items: center; justify-content: center; height: 100%; text-align: center; padding: 2rem;">
            <div>
              <h2 style="color: hsl(0, 70%, 50%); margin-bottom: 1rem;">Initialization Error</h2>
              <p style="color: hsl(220, 10%, 50%);">Failed to load the application. Please refresh the page.</p>
            </div>
          </div>
        `;
      }
    }
  }

  function mountSessionGrid() {
    if (sessionsSidebar) {
      sessionGridComponent = new SessionGrid({
        target: sessionsSidebar,
        props: {}
      });

      // Set up event listeners
      sessionGridComponent.$on('createSession', handleCreateSession);
      sessionGridComponent.$on('selectSession', handleSelectSession);
      sessionGridComponent.$on('deleteSession', handleDeleteSession);
    }
  }

  function setupEventListeners() {
    if (startChatBtn) {
      startChatBtn.addEventListener('click', handleStartChat);
    }
  }

  async function handleStartChat() {
    if (!startChatBtn) return;

    try {
      loading = true;
      startChatBtn.disabled = true;
      startChatBtn.textContent = 'Creating Session...';

      const session = await invoke('create_chat_session', {
        title: 'New Chat Session'
      });

      activeSessionId = session.id;
      currentSession = session;

      updateChatInterface();
    } catch (error) {
      console.error('Failed to create session:', error);
      loading = false;
      startChatBtn.disabled = false;
      startChatBtn.textContent = 'Start New Chat';
    }
  }

  async function handleCreateSession() {
    await handleStartChat();
  }

  async function handleSelectSession(event: any) {
    const sessionId = event.detail;
    try {
      loading = true;

      const sessions = await invoke('get_chat_sessions');
      const session = sessions.find((s: any) => s.id === sessionId);

      if (session) {
        activeSessionId = sessionId;
        currentSession = session;
        updateChatInterface();
      }
    } catch (error) {
      console.error('Failed to select session:', error);
      loading = false;
    }
  }

  async function handleDeleteSession(event: any) {
    const sessionId = event.detail;
    try {
      // Note: delete_session API not implemented yet
      console.log('Delete session:', sessionId);
    } catch (error) {
      console.error('Failed to delete session:', error);
    }
  }

  async function handleSendMessage(event: any) {
    const { content } = event.detail;
    try {
      await invoke('send_chat_message', {
        session_id: activeSessionId,
        content
      });
    } catch (error) {
      console.error('Failed to send message:', error);
    }
  }

  function updateChatInterface() {
    if (!chatSection || !welcomeScreen) return;

    if (currentSession) {
      // Hide welcome screen
      welcomeScreen.style.display = 'none';

      // Mount or update ChatInterface
      if (!chatInterfaceComponent) {
        // Clear chat section
        chatSection.innerHTML = '';

        chatInterfaceComponent = new ChatInterface({
          target: chatSection,
          props: {
            session: currentSession,
            loading
          }
        });

        // Set up event listeners
        chatInterfaceComponent.$on('sendMessage', handleSendMessage);
        chatInterfaceComponent.$on('close', handleCloseChat);
      } else {
        // Update existing component
        chatInterfaceComponent.$set({
          session: currentSession,
          loading
        });
      }
    } else {
      // Show welcome screen
      welcomeScreen.style.display = 'flex';

      // Destroy ChatInterface if it exists
      if (chatInterfaceComponent) {
        chatInterfaceComponent.$destroy();
        chatInterfaceComponent = null;
      }
    }
  }

  function handleCloseChat() {
    activeSessionId = null;
    currentSession = null;
    updateChatInterface();
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp);
  } else {
    initializeApp();
  }
</script>
