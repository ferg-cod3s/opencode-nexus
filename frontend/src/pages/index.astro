---
import Layout from '../layouts/Layout.astro';
import SessionGrid from '../components/SessionGrid.svelte';
import ChatInterface from '../components/ChatInterface.svelte';
---

<Layout title="OpenCode Nexus">
  <main class="main-container">
    <div class="app-layout">
        <!-- Session Grid Sidebar -->
        <aside class="sessions-sidebar" id="sessions-sidebar">
          <!-- SessionGrid component will be mounted here by JavaScript -->
        </aside>

        <!-- Chat Interface -->
        <section class="chat-section" id="chat-section" data-testid="chat-messages">
          <!-- ChatInterface or welcome screen will be mounted here by JavaScript -->
          <div class="welcome-screen" id="welcome-screen">
            <div class="welcome-content">
              <h1 class="welcome-title">Welcome to OpenCode Nexus</h1>
              <p class="welcome-description">
                Start a conversation with your local OpenCode AI assistant.
                Create a new session to begin chatting.
              </p>
                <button
                  class="start-btn"
                  id="start-chat-btn"
                  data-testid="new-session-button"
                  disabled
                >
                  Start Your First Chat
                </button>
            </div>
          </div>
        </section>
    </div>
  </main>
</Layout>

<style>
  .main-container {
    height: 100vh;
    background: hsl(220, 20%, 98%);
  }

  .app-layout {
    display: flex;
    height: 100%;
    gap: 1rem;
    padding: 1rem;
  }

  .sessions-sidebar {
    width: 350px;
    flex-shrink: 0;
  }

  .chat-section {
    flex: 1;
    min-width: 0;
  }

  .welcome-screen {
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: hsl(0, 0%, 100%);
    border-radius: 12px;
    box-shadow: 0 4px 20px hsla(220, 20%, 20%, 0.1);
  }

  .welcome-content {
    text-align: center;
    max-width: 400px;
    padding: 2rem;
  }

  .welcome-title {
    font-size: 2rem;
    font-weight: 600;
    color: hsl(220, 20%, 20%);
    margin: 0 0 1rem 0;
  }

  .welcome-description {
    font-size: 1.125rem;
    color: hsl(220, 10%, 60%);
    margin: 0 0 2rem 0;
    line-height: 1.6;
  }

  .start-btn {
    padding: 0.875rem 2rem;
    background: hsl(220, 90%, 60%);
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .start-btn:hover:not(:disabled) {
    background: hsl(220, 80%, 50%);
    transform: translateY(-1px);
  }

  .start-btn:active:not(:disabled) {
    transform: translateY(0);
  }

  .start-btn:disabled {
    background: hsl(220, 20%, 80%);
    cursor: not-allowed;
    transform: none;
  }

  .start-btn:focus {
    outline: 2px solid hsl(220, 90%, 60%);
    outline-offset: 2px;
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .welcome-screen {
      background: hsl(0, 0%, 100%);
      border: 2px solid hsl(0, 0%, 0%);
    }

    .start-btn {
      background: hsl(0, 0%, 0%);
      border: 2px solid hsl(0, 0%, 100%);
      color: hsl(0, 0%, 100%);
    }

    .start-btn:hover:not(:disabled) {
      background: hsl(0, 0%, 20%);
    }

    .start-btn:focus {
      outline: 3px solid hsl(0, 0%, 0%);
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .start-btn {
      transition: none;
    }

    .start-btn:hover:not(:disabled) {
      transform: none;
    }

    .start-btn:active:not(:disabled) {
      transform: none;
    }
  }

  /* Mobile responsiveness */
  @media (max-width: 1024px) {
    .app-layout {
      flex-direction: column;
      gap: 0.75rem;
    }

    .sessions-sidebar {
      width: 100%;
      max-height: 300px;
    }

    .chat-section {
      flex: 1;
    }
  }

  @media (max-width: 768px) {
    .app-layout {
      padding: 0.5rem;
      gap: 0.5rem;
    }

    .welcome-content {
      padding: 1.5rem;
    }

    .welcome-title {
      font-size: 1.5rem;
    }

    .welcome-description {
      font-size: 1rem;
    }

    .start-btn {
      padding: 0.75rem 1.5rem;
      font-size: 0.875rem;
    }
  }
</style>

<script>
  import { invoke, checkEnvironment } from '../utils/tauri-api.ts';
  import type { ChatSession } from '../types/chat';
  import SessionGrid from '../components/SessionGrid.svelte';
  import ChatInterface from '../components/ChatInterface.svelte';

  // State management
  let sessions: ChatSession[] = [];
  let activeSessionId: string | null = null;
  let loading = true;
  let currentSession: ChatSession | null = null;

  // Svelte component instances
  let sessionGridComponent: any = null;
  let chatInterfaceComponent: any = null;

  async function initializeApp() {
    try {
      console.log('🔍 Index page: Starting initialization...');

      // Check onboarding status
      const state = await invoke('get_onboarding_state');
      console.log('🔍 Index page: Onboarding state:', state);

      if (!state.config || !state.config.is_completed) {
        console.log('🔍 Index page: Onboarding not completed, redirecting to /onboarding');
        // Redirect to onboarding
        window.location.href = '/onboarding';
        return;
      }

      console.log('🔍 Index page: Onboarding completed, checking authentication...');

      // Check authentication status
      const isAuthenticated = await invoke('is_authenticated');
      console.log('🔍 Index page: Authentication status:', isAuthenticated);

      if (!isAuthenticated) {
        console.log('🔍 Index page: Not authenticated, redirecting to /login');
        window.location.href = '/login';
        return;
      }

      console.log('🔍 Index page: Backend authentication passed, checking session...');

      // Check if we have valid session data in sessionStorage
      const sessionAuthenticated = sessionStorage.getItem('authenticated');
      const sessionUsername = sessionStorage.getItem('username');

      if (!sessionAuthenticated || !sessionUsername) {
        console.log('🔍 Index page: Session data missing, need to establish session');

        // Try to get user info from backend to establish session
        try {
          const userInfo = await invoke('get_user_info');
          if (userInfo && userInfo[0]) {
            console.log('🔍 Index page: Got user info from backend, setting session:', userInfo[0]);
            sessionStorage.setItem('authenticated', 'true');
            sessionStorage.setItem('username', userInfo[0]);
          } else {
            console.log('🔍 Index page: No user info available, redirecting to /login');
            window.location.href = '/login';
            return;
          }
        } catch (error) {
          console.error('❌ Index page: Failed to get user info:', error);
          console.log('🔍 Index page: Redirecting to /login due to session error');
          window.location.href = '/login';
          return;
        }
      }

      console.log('🔍 Index page: All checks passed, redirecting to /dashboard');

      // All checks passed, redirect to dashboard
      window.location.href = '/dashboard';

    } catch (error) {
      console.error('❌ Index page: Failed to initialize app:', error);
      console.log('🔍 Index page: Error occurred, redirecting to /onboarding');
      window.location.href = '/onboarding';
    }
  }

  function mountComponents() {
    // Mount SessionGrid component
    const sessionsSidebar = document.getElementById('sessions-sidebar');
    if (sessionsSidebar && !sessionGridComponent) {
      sessionGridComponent = new SessionGrid({
        target: sessionsSidebar,
        props: {
          sessions,
          activeSessionId,
          loading
        }
      });

      // Set up event listeners
      sessionGridComponent.$on('createSession', handleCreateSession);
      sessionGridComponent.$on('selectSession', handleSelectSession);
      sessionGridComponent.$on('deleteSession', handleDeleteSession);
    }

    // Mount ChatInterface if we have an active session
    updateChatInterface();
  }

  function updateChatInterface() {
    const chatSection = document.getElementById('chat-section');
    const welcomeScreen = document.getElementById('welcome-screen');

    if (currentSession) {
      // Hide welcome screen
      if (welcomeScreen) welcomeScreen.style.display = 'none';

      // Mount or update ChatInterface
      if (!chatInterfaceComponent) {
        // Clear chat section
        chatSection.innerHTML = '';

        chatInterfaceComponent = new ChatInterface({
          target: chatSection,
          props: {
            session: currentSession,
            loading
          }
        });

        // Set up event listeners
        chatInterfaceComponent.$on('sendMessage', handleSendMessage);
        chatInterfaceComponent.$on('close', handleCloseChat);
      } else {
        // Update existing component
        chatInterfaceComponent.$set({
          session: currentSession,
          loading
        });
      }
    } else {
      // Show welcome screen
      if (welcomeScreen) welcomeScreen.style.display = 'flex';

      // Destroy ChatInterface if it exists
      if (chatInterfaceComponent) {
        chatInterfaceComponent.$destroy();
        chatInterfaceComponent = null;
      }
    }
  }

  function handleCloseChat() {
    activeSessionId = null;
    currentSession = null;
    updateChatInterface();
  }

  async function loadSessions() {
    try {
      sessions = await invoke('get_chat_sessions');
      if (sessions.length > 0 && !activeSessionId) {
        activeSessionId = sessions[0].id;
        await loadActiveSession();
      }
    } catch (error) {
      console.error('Failed to load sessions:', error);
      sessions = [];
    }
  }

  async function loadActiveSession() {
    if (!activeSessionId) return;

    try {
      const sessionData = await invoke('get_chat_session_history', { sessionId: activeSessionId });
      currentSession = sessions.find(s => s.id === activeSessionId) || null;
      if (currentSession) {
        currentSession.messages = sessionData;
      }
    } catch (error) {
      console.error('Failed to load session history:', error);
    }
  }

  async function handleCreateSession() {
    try {
      setLoading(true);

      const newSession = await invoke('create_chat_session', {
        title: `Chat ${new Date().toLocaleString()}`
      });

      sessions = [newSession, ...sessions];
      activeSessionId = newSession.id;
      currentSession = newSession;

      // Update components
      updateComponents();

    } catch (error) {
      console.error('Failed to create session:', error);
      // Show user-friendly error message
      alert('Failed to create chat session. Please check that the OpenCode server is running.');
    } finally {
      setLoading(false);
    }
  }

  function handleSelectSession(event: CustomEvent) {
    const session = event.detail.session;
    activeSessionId = session.id;
    loadActiveSession();
  }

  function handleDeleteSession(event: CustomEvent) {
    const sessionId = event.detail.sessionId;
    // Note: We might need to add a delete session command to the backend
    sessions = sessions.filter(s => s.id !== sessionId);
    if (activeSessionId === sessionId) {
      activeSessionId = sessions.length > 0 ? sessions[0].id : null;
      loadActiveSession();
    }
    updateComponents();
  }

  async function handleSendMessage(event: CustomEvent) {
    if (!currentSession) return;

    const content = event.detail.content;

    try {
      setLoading(true);

      const message = await invoke('send_chat_message', {
        sessionId: currentSession.id,
        content
      });

      // Add the sent message to the session
      currentSession.messages = [...currentSession.messages, message];

      // Update the chat interface
      updateChatInterface();

    } catch (error) {
      console.error('Failed to send message:', error);
      // Show user-friendly error message
      alert('Failed to send message. Please check your connection and try again.');
    } finally {
      setLoading(false);
    }
  }

  function setLoading(isLoading: boolean) {
    loading = isLoading;
    updateComponents();
  }

  function updateComponents() {
    // Update SessionGrid component
    if (sessionGridComponent) {
      sessionGridComponent.$set({
        sessions,
        activeSessionId,
        loading
      });
    }

    // Update ChatInterface component
    updateChatInterface();
  }

  // Initialize when page loads
  document.addEventListener('DOMContentLoaded', () => {
    initializeApp();

    // Add event listener for the start chat button
    const startBtn = document.getElementById('start-chat-btn');
    if (startBtn) {
      startBtn.addEventListener('click', () => handleCreateSession());
    }
  });

  // Cleanup function for when the page unloads
  window.addEventListener('beforeunload', () => {
    if (sessionGridComponent) {
      sessionGridComponent.$destroy();
    }
    if (chatInterfaceComponent) {
      chatInterfaceComponent.$destroy();
    }
  });
</script>
